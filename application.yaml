
---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  Creates a VPC with public subnets for a given AWS Account.

Parameters:

  VPCNAME:
    Description: Name for this VPC
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String

  INTERNETGATEWAYNAME:
    Description: Internet Gateway Name
    Type: String

  PBRTNAME:
    Description: Public RouteTable Name
    Type: String

  DBName:
    Description: Database Name
    Type: String

  DBUsername:
    Description: Database Username
    Type: String

  DBPassword:
    Description: Database Password
    Type: String

  EC2KeyName:
    Description: Key Name
    Type: String

  AMIId:
    Description: AMI Id
    Type: String

  EC2RoleName:
    Description: EC2 Role Name
    Type: String

  WebS3PolicyName:
    Description: Web S3 Policy Name
    Type: String

  InstanceType:
    Description: Instance Type
    Type: String

  DBInstanceIdentifierVal:
    Description: DBInstance Identifier Value
    Type: String

  AllocatedStorageValue:
    Description: DBInstance Storage Value
    Type: String

  DBInstanceClassValue:
    Description: DBInstance Class Value
    Type: String

  PubliclyAccessibleValue:
    Description: Publicly Accessible Value
    Type: String

  EC2InstanceSizeValue:
    Description: EC2 Instance Size Value
    Type: String

  EC2TAGKEY:
    Description: EC2 TAG KEY
    Type: String

  EC2TAGVALUE:
    Description: EC2 TAG VALUE
    Type: String

  CodeDeployBucket:
    Description: Code Deploy Bucket
    Type: String

  AppName:
    Description: Application Name
    Type: String

  ComputePlatformValue:
    Description: Compute Platform Value
    Type: String

  AccountId:
    Description: Account Id
    Type: String

  Region:
    Description: Region
    Type: String

  DomainNameValue:
    Type: String
    Default: dev.kshitizgupta.me

  HostedZoneIdValue:
    Type: String
    Default: ZSN8G6SXDTXF8

  AlarmHighEvaluationPeriodValue:
    Type: String
    Default: 300

  AlarmHighPeriodValue:
    Type: String
    Default: 1

  AlarmLowEvaluationPeriodValue:
    Type: String
    Default: 300

  AlarmLowPeriodValue:
    Type: String
    Default: 1

  AlarmHighThreshold:
    Type: String
    Default: 10

  AlarmLowThreshold:
    Type: String
    Default: 5

  TargetGroupMatcherHttpCode:
    Type: String
    Default: 401

  WebServerMinCapacity:
    Type: String
    Default: 3

  WebServerMaxCapacity:
    Type: String
    Default: 3

  WebServerDesiredCapacity:
    Type: String
    Default: 10

  DynamaoTableName:
    Type: String
    Default: csye6225

  SNSTopicName:
    Type: String
    Default: due_bill_topic

  SQSQueueName:
    Type: String
    Default: BillQueue

  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:696709895707:certificate/1ff2d9a7-30b1-40f9-99dd-55ca85548ae0


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]


  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Ref INTERNETGATEWAYNAME
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment

    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicSubnet1CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicSubnet2CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-2

  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicSubnet3CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-3



  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Ref PBRTNAME

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway



  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable



  WebappSec:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8000'
          ToPort: '8000'
          SourceSecurityGroupId:
            Ref: AppLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId:
            Ref: AppLoadBalancerSecurityGroup

  AppLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: This is done to enable access of HTTP via port 80, SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8000'
          ToPort: '8000'
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPC



  myDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: description
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: String
          Value: String


  RDSSec:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref WebappSec
      Tags:
        - Key: String
          Value: String

  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: !Ref AllocatedStorageValue
      DBInstanceClass: !Ref DBInstanceClassValue
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref myDBSubnetGroup
      DBInstanceIdentifier: !Ref DBInstanceIdentifierVal
      VPCSecurityGroups:
        - !Ref RDSSec
      PubliclyAccessible: !Ref PubliclyAccessibleValue
      MultiAZ: "false"
      StorageEncrypted: "true"
      StorageType: gp2
      Tags:
        - Key: String
          Value: String


  Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Transition:
              TransitionInDays: 30
              StorageClass: "STANDARD_IA"


  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref EC2RoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - Ref: Ec2SNSPolicy
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'


  WebAppS3:
    DependsOn:
      - EC2Role
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Ref WebS3PolicyName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:DeleteObject
              - s3:DeleteObjectAcl
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:ListObject
              - s3:ListObjectAcl
              - s3:PutObject
              - s3:PutObjectAcl
            Resource:
              #- !Join ['', ['arn:aws:s3:::*']]
              - !Join ['', ['arn:aws:s3:::', !Ref Bucket, '/*']]
      Roles:
        - !Ref EC2Role


  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-DjangoEC2InstanceProfile
      Path: "/"
      Roles:
        - !Ref EC2Role


#  DjangoEC2Instance:
#      Type: AWS::EC2::Instance
#      DependsOn: AttachGateway
#      Properties:
#        ImageId: !Ref AMIId
#        InstanceType: !Ref InstanceType
#        KeyName: !Ref EC2KeyName
#        IamInstanceProfile : !Ref InstanceProfile
#        BlockDeviceMappings:
#          - DeviceName: "/dev/sdm"
#            Ebs:
#              VolumeType: gp2
#              VolumeSize:
#                Ref: EC2InstanceSizeValue
#        NetworkInterfaces:
#          - AssociatePublicIpAddress: "true"
#            DeviceIndex: "0"
#            SubnetId: !Ref PublicSubnet3
#            DeleteOnTermination: true
#            GroupSet:
#              - !Ref WebappSec
#        Tags:
#          - Key: !Ref EC2TAGKEY
#            Value: !Ref EC2TAGVALUE
#        UserData:
#          Fn::Base64:
#            Fn::Join:
#            - ""
#            - - "#!/bin/bash\n"
#              - "cd /etc/\n"
#              - "echo $'export DB_HOST=\""
#              - !GetAtt MyDB.Endpoint.Address
#              - "\"\n' >> environment"
#              - "echo $'export DB_NAME=\""
#              - !Ref DBName
#              - "\"\n' >> environment"
#              - "echo $'export DB_USERNAME=\""
#              - !Ref DBUsername
#              - "\"\n' >> environment"
#              - "echo $'export DB_PASSWORD=\""
#              - !Ref DBPassword
#              - "\"\n' >> environment"
#              - "echo $'export S3_BUCKET_NAME=\""
#              - !Ref Bucket
#              - "\"\n' >> environment"


  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'codedeploy.amazonaws.com'
            Action: 'sts:AssumeRole'


  AWSCodeDeployRole:
    DependsOn:
      - CodeDeployServiceRole
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: AWSCodeDeployRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:CompleteLifecycleAction
              - autoscaling:DeleteLifecycleHook
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:PutLifecycleHook
              - autoscaling:RecordLifecycleActionHeartbeat
              - autoscaling:CreateAutoScalingGroup
              - autoscaling:UpdateAutoScalingGroup
              - autoscaling:EnableMetricsCollection
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribePolicies
              - autoscaling:DescribeScheduledActions
              - autoscaling:DescribeNotificationConfigurations
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:SuspendProcesses
              - autoscaling:ResumeProcesses
              - autoscaling:AttachLoadBalancers
              - autoscaling:PutScalingPolicy
              - autoscaling:PutScheduledUpdateGroupAction
              - autoscaling:PutNotificationConfiguration
              - autoscaling:PutLifecycleHook
              - autoscaling:DescribeScalingActivities
              - autoscaling:DeleteAutoScalingGroup
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
              - ec2:TerminateInstances
              - tag:GetResources
              - sns:Publish
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeInstanceHealth
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
            Resource:
              - "*"
      Roles:
        - !Ref CodeDeployServiceRole

  CodeDeployEC2S3:
    DependsOn:
      - EC2Role
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CodeDeployEC2S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref CodeDeployBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref CodeDeployBucket, '/*']]
      Roles:
        - !Ref EC2Role

  CircleCIUploadToS3:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CircleCIUploadToS3
      Users:
        - circleci
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:Get*
              - s3:List*
              - s3:PutObject
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref CodeDeployBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref CodeDeployBucket, '/*']]


  CircleCICodeDeploy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CircleCICodeDeploy
      Users:
        - circleci
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - codedeploy:RegisterApplicationRevision
              - codedeploy:GetApplicationRevision
            Resource:
              Fn::Join:
                - ":"
                - - arn:aws:codedeploy
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - application
                  - Ref: AppName
          - Effect: "Allow"
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetDeployment
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - codedeploy:GetDeploymentConfig
            Resource:
              Fn::Join:
                - ":"
                - - arn:aws:codedeploy
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - deploymentconfig:CodeDeployDefault.AllAtOnce




  CodeDeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Ref AppName
      ComputePlatform: !Ref ComputePlatformValue


  CodeDeployApplicationGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: webapp
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      Ec2TagFilters:
        - Key: !Ref EC2TAGKEY
          Value: !Ref EC2TAGVALUE
          Type: KEY_AND_VALUE
      ServiceRoleArn:
        Fn::GetAtt: [ CodeDeployServiceRole, Arn ]
      AutoScalingGroups:
        - Ref: WebServerGroup
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name:
              Fn::GetAtt:
                - TargetGroup
                - TargetGroupName


  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      SecurityGroups:
        - Ref: AppLoadBalancerSecurityGroup
      Subnets:
        - Ref: PublicSubnet2
        - Ref: PublicSubnet3
      Name: AppLoadBalancer
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: Loadbalancer
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: '8000'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 7
      HealthyThresholdCount: 3
      Name: !Sub ${AWS::StackName}-TargetGroup
      Port: 8000
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VPC
      Matcher:
        HttpCode: !Ref TargetGroupMatcherHttpCode


  EC2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash\n"
              - "cd /etc/\n"
              - "echo $'export DB_HOST=\""
              - !GetAtt MyDB.Endpoint.Address
              - "\"\n' >> environment"
              - "echo $'export DB_NAME=\""
              - !Ref DBName
              - "\"\n' >> environment"
              - "echo $'export DB_USERNAME=\""
              - !Ref DBUsername
              - "\"\n' >> environment"
              - "echo $'export DB_PASSWORD=\""
              - !Ref DBPassword
              - "\"\n' >> environment"
              - "echo $'export S3_BUCKET_NAME=\""
              - !Ref Bucket
              - "\"\n' >> environment"
              - "echo $'export SNSNAME=\""
              - !Ref SNSTopicName
              - "\"\n' >> environment"
              - "echo $'export SQSNAME=\""
              - !Ref SQSQueueName
              - "\"\n' >> environment"
              - "echo $'export AWSID=\""
              - !Ref AWS::AccountId
              - "\"\n' >> environment"
      ImageId:
        Ref: AMIId
      KeyName:
        Ref: EC2KeyName
      SecurityGroups:
        - Ref: WebappSec
      LaunchConfigurationName: !Sub ${AWS::StackName}-EC2LaunchConfiguration
      InstanceType: t2.micro
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: "/dev/sdm"
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: 'true'
            VolumeSize:
              Ref: EC2InstanceSizeValue
      IamInstanceProfile:
        Ref: InstanceProfile



  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
        Ref: EC2LaunchConfiguration
      MinSize: !Ref WebServerMinCapacity
      MaxSize: !Ref WebServerMaxCapacity
      TargetGroupARNs:
        - Ref: TargetGroup
      Tags:
        - Key:
            Ref: EC2TAGKEY
          Value:
            Ref: EC2TAGVALUE
          PropagateAtLaunch: true
      DesiredCapacity: !Ref WebServerDesiredCapacity
      Cooldown: '60'
      VPCZoneIdentifier:
        - Ref: PublicSubnet2
        - Ref: PublicSubnet3

  ServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'


  ServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"


  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 5% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: !Ref AlarmHighPeriodValue
      EvaluationPeriods: !Ref AlarmHighEvaluationPeriodValue
      Threshold: !Ref AlarmHighThreshold
      AlarmActions:
        - Ref: ServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerGroup
      ComparisonOperator: GreaterThanThreshold


  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 3% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: !Ref AlarmLowPeriodValue
      EvaluationPeriods: !Ref AlarmLowEvaluationPeriodValue
      Threshold: !Ref AlarmLowThreshold
      AlarmActions:
        - Ref: ServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerGroup
      ComparisonOperator: LessThanThreshold


  DNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name:
        Ref: DomainNameValue
      HostedZoneId:
        Ref: HostedZoneIdValue
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
            - AppLoadBalancer
            - CanonicalHostedZoneID
        DNSName:
          Fn::GetAtt:
            - AppLoadBalancer
            - DNSName
      Type: A


  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: AppLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn


  Ec2SNSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-ec2-sns-policy
      Description: Policy that allows ec2 to access sns
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sns:Publish
              - sns:CreateTopic
            Effect: Allow
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:sns:'
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":"
                  - Ref: SNSTopicName
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref SQSQueueName


  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName:
        Ref: DynamaoTableName #pass value
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true


  CircleCILambdaUpdate:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:UpdateFunctionCode
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:lambda:us-east-1:' #parameterize
              - Ref: AWS::AccountId
              - ":function:EmailLambdaFunction"
      PolicyName: Circle-CI-Lambda-Update
      Users:
      - circleci


  EmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EmailLambdaFunction
      Handler: lambda_func.handler_name
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Code:
        S3Bucket:
          Ref: CodeDeployBucket
        S3Key: serverless.zip
      Environment:
        Variables:
          DynamoDBEndPoint: dynamodb.us-east-1.amazonaws.com
          ttlInMin: '60'
          domain:
            Ref: DomainNameValue
      Runtime: python3.7
      ReservedConcurrentExecutions: 5
      MemorySize: 256
      Timeout: '900'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - Ref: DynamoDBLambdaSesAccessPolicy
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole


  EmailLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: EmailLambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: DueBill

  DueBill:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - EmailLambdaFunction
          - Arn
        Protocol: lambda
      TopicName: !Ref SNSTopicName

  DynamoDBLambdaSesAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DynamoDBLambdaSesAccessPolicy
      Description: Policy for lambda that will access the ses and dynamodb
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
          Effect: Allow
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:dynamodb:'
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":table/"
              - Ref: DynamaoTableName #passvalue
        - Action: ses:SendEmail
          Effect: Allow
          Resource: "*"

  SNStopicpolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Publish
          - SNS:DeleteTopic
          - SNS:ListSubscriptionsByTopic
          - SNS:GetTopicAttributes
          - SNS:Receive
          - SNS:AddPermission
          - SNS:Subscribe
          Resource:
            Ref: DueBill
          Condition:
            StringEquals:
              AWS:SourceOwner:
                Ref: AWS::AccountId
      Topics:
      - Ref: DueBill
